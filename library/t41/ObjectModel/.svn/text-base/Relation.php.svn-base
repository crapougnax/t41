<?php
/**
 * t41 Toolkit
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://t41.quatrain.com/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@quatrain.com so we can send you a copy immediately.
 *
 * @category   t41
 * @package    t41_Core
 * @copyright  Copyright (c) 2006-2009 Quatrain Technologies SAS (http://technologies.quatrain.com)
 * @license    http://t41.quatrain.com/license/new-bsd     New BSD License
 * @version    $Revision$
 */

/** Required files **/
require_once 't41/Object.php';

/**
 * Abstract class providing basic functions needed to data relations building.
 *
 * @category   t41
 * @package    t41_Core
 * @copyright  Copyright (c) 2006-2009 Quatrain Technologies SAS (http://technologies.quatrain.com)
 * @license    http://t41.quatrain.com/license/new-bsd     New BSD License
 */
abstract class t41_Object_Relation extends t41_Legacy_Object {
	
	
	/**
	 * Name of the datasource (typically a SQL table) where data to relate to are stored
	 *
	 * @var string
	 */
	protected $_dataTable;

	/**
	 * Name of the primary key identifier of a record in the $_dataTable datasource
	 *
	 * @var string
	 */
	protected $_dataIdCol;
	
	/**
	 * Name of the label identifier of a record in the $_dataTable datasource
	 *
	 * @var string
	 */
	protected $_dataLabelCol;
	
	/**
	 * Name of the datasource (typically a SQL table) where relations are kept
	 *
	 * @var string
	 */
	protected $_relationTable;
	
	/**
	 * Array of all possible relations
	 *
	 * @var array
	 */
	protected $_data = array();
	
	/**
	 * Array of established relations
	 *
	 * @var array
	 */
	protected $_record = array();
	
	
	public function __construct($id = null, $table, $dataTable = null, array $params = null)
	{
		$this->_table = $table;
		
		$this->_setParameterObjects(array(	
								'allow_change'				=> new t41_Parameter(t41_Parameter::BOOLEAN, true),
								'max_relations_allowed' 	=> new t41_Parameter(t41_Parameter::INTEGER, 0),
								'allow_value_add'			=> new t41_Parameter(t41_Parameter::BOOLEAN, true),
								'allow_global_search'		=> new t41_Parameter(t41_Parameter::BOOLEAN, false),
								'value_min_length'			=> new t41_Parameter(t41_Parameter::INTEGER, 2),
								'value_max_length'			=> new t41_Parameter(t41_Parameter::INTEGER, 20),
								'read_only'					=> new t41_Parameter(t41_Parameter::BOOLEAN, false)
							  ));
							  
		if (is_array($params)) {
			$this->_setParameters($params);
		}
		
		if ($dataTable) {
			$this->_dataTable = $dataTable;
		} else if ($this->_dataTable == null) {
			
			throw new t41_Exception("Le nom de la table source doit etre renseignÃ© dans la classe ou le constructeur");
		}
		
		$this->_dataIdCol    = $this->_dataTable . '_id';
		$this->_dataLabelCol = $this->_dataTable . '_label';
		
		$this->_relationTable = $this->_table . '__' . $this->_dataTable;
		
		if ($id) {
			$this->setId($id);
			$this->_getRecordValues();
		}
		$this->_getValues();
	}
	
	
	public function getValues()
	{
		return $this->_data;
	}
	
	
	public function getRecordValues()
	{
		return $this->_record;
	}
	
	
	protected function _getValues()
	{
		$db = t41_Core::dbGetHook();
		$select = $db->select()
					 ->from($this->_dataTable)
					 ->order($this->_dataLabelCol);
		$this->_data = (array) $db->fetchPairs($select);
	}
	
	
	public function addValue($str)
	{
		$str = strtolower(trim($str));
		
		if (strlen($str) < $this->getParameter('value_min_length') 
		 || strlen($str) > $this->getParameter('value_max_length')) {
			
			return false;
		}
		
		if (in_array($str, $this->_data)) {
			
			return $this->createRelation(array_search($str, $this->_data));
		}

		$db = t41_Core::dbGetHook();
		$data = array(
					    $this->_dataLabelCol => $str,
			    		't41_db_id' => $this->_table
					 );
		try {
			$db->insert($this->_dataTable, $data);
		} catch (Exception $e) {
			
			return false;
		}
		
		$valueId = $db->lastInsertId();
		$this->_data[$valueId] = $str;
		$this->createRelation($valueId);
		
		return $valueId;
	}
	
	
	protected function _getRecordValues()
	{
		if (! $this->_id) return;
		
		$db = t41_Core::dbGetHook();
		$select = $db->select()
					 ->from($this->_relationTable, array($this->_dataIdCol))
					 ->where($this->_table . '_id = ?', $this->_id);
		
		$this->_record = (array) $db->fetchCol($select);
	}
	
	
	public function createRelation($relationKey)
	{
		if ($this->_id) {
		
			try {
				$db = t41_Core::dbGetHook();
				$array = array($this->_table . '_id' => $this->_id, $this->_dataIdCol => $relationKey);
				$res = $db->insert($this->_relationTable, $array);

			} catch (Exception $e) {
				
				return $e->getMessage();
			}
		}
		
		$this->_record[] = $relationKey;
		
		return true;
	}
	
	
	public function deleteRelation($relationKey)
	{
		if ($this->_id) {
			
			try {
				$db = t41_Core::dbGetHook();
				$where = sprintf($this->_table . '_id = %s AND ' . $this->_dataIdCol . ' = %s', $this->_id, $relationKey);
				$res = $db->delete($this->_relationTable, $where);

			} catch (Exception $e) {
				
				return $e->getMessage();
			}
		}

		$key = array_search($relationKey, $this->_record);

		if ($key) {
			
			unset($this->_record[$key]);
		}
		
		return true;
	}
	
	
	public function suggestRelation($str)
	{

		$db = t41_Core::dbGetHook();
		$select = $db->select();
		
		$select->from($this->_dataTable, array($this->_dataIdCol, new Zend_Db_Expr("LOWER($this->_dataLabelCol)")))
		       ->where($this->_dataLabelCol . ' LIKE ?', strtolower($str) . '%')
		       ->order($this->_dataLabelCol . ' ASC');
		
		if (!$this->getParameter('allow_global_search')) {
			$select->where('t41_db_id = ?', $this->_table);
		}
		
		//echo $select;
		return $db->fetchPairs($select);
	}
	
	
	/**
	 * Sauve toutes les relations en les associant a l'id fourni
	 *
	 * @param mixed $id
	 */
	public function saveAllRelations($id = null)
	{
		if ($id == null) {
			
			throw new t41_Exception("La transmission d'un id est obligatoire pour executer cette methode");
		}
		
		$this->_id = $id;
		
		foreach ($this->_record as $record) {
			
			$this->createRelation($record);
		}
	}
}