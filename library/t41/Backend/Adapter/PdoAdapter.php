<?php

namespace t41\Backend\Adapter;

/**
 * t41 Toolkit
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.t41.org/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@t41.org so we can send you a copy immediately.
 *
 * @category   t41
 * @package    t41_Backend
 * @copyright  Copyright (c) 2006-2011 Quatrain Technologies SARL
 * @license    http://www.t41.org/license/new-bsd     New BSD License
 * @version    $Revision: 915 $
 */

use t41\Backend;
use t41\ObjectModel;
use t41\ObjectModel\Property;

/**
 * Abstract class providing all CRUD methods to use with PDO adapters
 * 
 * Must be inherited by an adapter-binded class (ex: t41_Backend_Adapter_Pdo_Mysql
 *
 * @category   t41
 * @package    t41_Backend
 * @copyright  Copyright (c) 2006-2011 Quatrain Technologies SARL
 * @license    http://www.t41.org/license/new-bsd     New BSD License
 */
abstract class PdoAdapter extends AdapterAbstract {


	/**
	 * Adapter type
	 *
	 * @var string
	 */
	protected $_adapter;
	
	
	/**
	 * Table name when it is part of the backend configuration
	 * 
	 * @var $_table string
	 */
	protected $_table;

	
	protected $_operators = array(Backend\Condition::OPERATOR_GTHAN => '>'
								, Backend\Condition::OPERATOR_LTHAN => '<'
								, Backend\Condition::OPERATOR_EQUAL => '='
								, Backend\Condition::OPERATOR_DIFF => '!='
								 );

	/**
	 * Database name
	 * @var string
	 */
	protected $_database;	
	
	
	
	/**
	 * Instanciate a PDO-based backend from a t41_Backend_Uri object 
	 *
	 * @param t41_Backend_Uri $uri
	 * @param string $alias
	 * @throws t41_Backend_Exception
	 */
	public function __construct(t41_Backend_Uri $uri, $alias = null)
	{
		parent::__construct($uri, $alias);
		
		$url = explode('/', $uri->getUrl());
		
		if (isset($url[0])) {
			
			$this->_database = $url[0];
			
		} else {
			
			require_once 't41/Backend/Exception.php';			
			throw new Exception('BACKEND_MISSING_DBNAME_PARAM');
		}
		
		if (isset($url[1])) {
			
			$this->_table = $url[1];
		}
	}
	
	
	protected function _connect()
	{
		try {
			$this->_ressource = \Zend_Db::factory($this->_adapter, array(
									    								 'host'     => $this->_uri->getHost()
													    				,'username' => $this->_uri->getUsername()
													    				,'password' => $this->_uri->getPassword()
													    				,'dbname'   => $this->_database
																	   )
												);
		} catch (\Zend_Db_Exception $e) {
			
			throw new Exception($e->getMessage());
		}		
	}
	
	
	/**
	 * Save new set of data from a t41_Data_Object object using INSERT 
	 *
	 * @param t41_Data_Object $do
	 * @return boolean
	 * @throws t41_Backend_Exception
	 */
	public function create(t41_Data_Object $do)
	{
		$table = $this->_getTableFromClass($do->getClass());
		
		if (! $table) {

			throw new Exception('BACKEND_MISSING_DBTABLE_PARAM');
		}
		
		// get a valid data array passing mapper if any
		if ($this->_mapper) {

			$recordSet = $do->map($this->_mapper, $this);
			
		} else {
			
			$recordSet = $do->toArray($this);
		}
		
		$this->_setLastQuery('insert', $recordSet);
		
		try {
			$this->_ressource->insert(isset($table) ? $table : $do->getClass(), $recordSet['data']);
			
		} catch (\Exception $e) {
			
			if (true) {
				throw new Exception("Error Creating Record: " . $e->getMessage);
			} else {
				return false;
			}
		}
		
		// inject new t41_Object_Uri object in data object
		
		// @todo provide support for primary keys that are not generated by DB (not AUTO INCREMENTED INTEGER)
		$id = $this->_ressource->lastInsertId();
		
		$uri = $id;
		
		if (! $this->_mapper instanceof Backend\Mapper) {
			
			$uri = $table . '/' . $uri;
		}
		
		$uri = new ObjectModel\ObjectUri($uri);
		$do->setUri($uri);
		
		/* get collection handling properties (if any) and process them */
		foreach ($do->getProperties() as $property) {
			
			if (! $property instanceof Property\CollectionProperty) {
				
				continue;
			}
			
			$collection = $property->getValue();
			
			//var_dump($collection->getMembers());
			
			/* @var $member t41_Object_Model */
			foreach ($collection->getMembers() as $member) {

				
				$member->setProperty($property->getParameter('keyprop'), $uri);
				$member->save();
			}
		}
		
		return true;
	}
	
	
	
	
	
	/**
	 * Populate the given data object
	 *  
	 * @param t41_Data_Object $do data object instance
	 * @return boolean
	 */
	public function read(t41_Data_Object $do) 
	{	
		// get table to use
		$table = $this->_getTableFromUri($do->getUri());
				
		if (! $table) {
		
			\Zend_Debug::dump($do->getUri());
			//die;
			require_once 't41/Backend/Exception.php';			
			throw new Exception('MISSING_DBTABLE_PARAM');
		}
		
		
		// primary key is either part of the mapper configuration or 'id'
		$pkey = $this->_mapper ? $this->_mapper->getPrimaryKey($do->getUri()->getClass()) : 'id';
		
		
		$this->_connect();
		
		// get data from backend
		$select = $this->_ressource->select()
								 ->from($table)
								 ->where("$pkey = ?", $do->getUri()->getIdentifier())
								 ->limit(1);
		
		$data = $this->_ressource->fetchRow($select);
		
		if (empty($data)) {
			
			return false;
		}
		
		/* complete url part of the object uri */
		$do->getUri()->setUrl($this->_database . '/' . $table . '/' . $do->getUri()->getIdentifier());
		
		/* populate data object */
		$do->populate($data, $this->_mapper);
		
		return true;
	}
	
	
	
	/**
	 * Update record data in the backend with passed data object properties values 
	 *
	 * @param t41_Data_Object $do
	 * @return boolean
	 */
	public function update(t41_Data_Object $do)
	{
		$uri = $do->getUri();

		// get table to use, from mapper if available, else from data object
		$table = $this->_getTableFromUri($uri);
		
		// Properties mapping (to array)
		if ($this->_mapper) {
			
			$data = $do->map($this->_mapper, $this);
			$data = $data['data'];
		}
		
		foreach ($data as $key => $value) {
			
			if ($value instanceof ObjectModel\ObjectUri) {
				
				$data[$key] = $value->asString($this->_uri);
			}
		}
		
		$pkey = $this->_mapper ? $this->_mapper->getPrimaryKey($uri->getClass()) : 'id';
		
		$this->_setLastQuery('update', $data, array('id' => $uri->getIdentifier()));
		return (bool) $this->_ressource->update($table, $data, $this->_ressource->quoteInto("$pkey = ?", $uri->getIdentifier()));
	}
	
	
	/**
	 * Delete record in backend 
	 * 
	 * @param t41\ObjectModel\DataObject $do
	 * @return boolean
	 */
	public function delete(ObjectModel\DataObject $do)
	{		
		$uri = $do->getUri();
		
		$table = ($this->_mapper instanceof Backend\Mapper) ? $this->_mapper->getDatastore($uri->getClass()) : $do->getClass();
		
		$pkey = $this->_mapper ? $this->_mapper->getPrimaryKey($uri->getClass()) : 'id';
		
		// @todo add a try/catch block
		return (bool) $this->_ressource->delete($table, $this->_ressource->quoteInto("$pkey = ?" . $uri->getIdentifier()));
	}
	
	
	/**
	 * Returns an array of objects queried from the given t41_Object_Collection instance parameters
	 * 
	 * The given collection is populated if it comes empty of members.
	 * 
	 * In any other case, this method doesn't directly populate the collection. This action is under the responsability of 
	 * the caller. For example, the t41_Object_Collection::find() method takes care of it.
	 * 
	 * @param t41_Object_Collection $collection
	 * @return array
	 */
	public function find(t41_Object_Collection $collection, $returnCount = false)
	{
		$class = $collection->getDataObject()->getClass();
		$table = $this->_getTableFromClass($class);
		
		if (! $table) {

			throw new Exception('BACKEND_MISSING_DBTABLE_PARAM');
		}
		
		// primary key is either part of the mapper configuration or 'id'
		
		//$pkey = $this->_mapper ? $this->_mapper->getPrimaryKey($class) : 'id';
		//$pkey = $table . '.' . $pkey;
		
		// primary key is either part of the mapper configuration or 'id'
		$pkey = $this->_mapper ? $this->_mapper->getPrimaryKey($class) : \t41\Backend::DEFAULT_PKEY;
		
		if (is_array($pkey)) {
			
			$composite = array();
			
			/* @var $obj t41_Backend_Key */
			foreach ($pkey as $obj) {
				
				$composite[] = sprintf('TRIM(%s)', $table . '.' . $obj->getName());
			}
			$pkey = sprintf("%s", implode(',', $composite));
			
		} else {
			
			$pkey = $table . '.' . $pkey;
		}
		
		$this->_connect();
		
		/* @var $select Zend_Db_Select */
		$select = $this->_ressource->select();
		//$select->from($table, $returnCount ? new Zend_Db_Expr("COUNT($pkey)") : $pkey);
		$select->from($table, $returnCount ? new \Zend_Db_Expr("COUNT(*) AS " . \t41\Backend::MAX_ROWS_IDENTIFIER) : $pkey);
		
		/* @var $condition t41_Condition */
		foreach ($collection->getConditions() as $conditionArray) {
			
			$jtable = '';
			$class = $collection->getDataObject()->getClass();
			
			$condition = $conditionArray[0];

			/* does condition contain another condition object ? */
			if ($condition->isRecursive()) {
				
				while ($condition->isRecursive()) {
					
					$property = $condition->getProperty();
					$parent	  = $property->getParent() ? $property->getParent()->getId() : $table;
					$condition = $condition->getCondition();
					
					$jtable = $this->_mapper ? $this->_mapper->getDatastore($property->getParameter('instanceof')) : $property->getParameter('instanceof');
					$jpkey  = $this->_mapper ? $this->_mapper->getPrimaryKey($property->getParameter('instanceof')) : 'id';
					
					$parentTable = $this->_mapper ? $this->_mapper->getDatastore($parent) : $parent;
						
					$join = sprintf("%s.%s = %s.%s", $parentTable, $jpkey, $jtable, $jpkey);
					$select->joinLeft($jtable, $join, array());
					$class = $property->getParameter('instanceof');
				}
			}
				
			$property = $condition->getProperty();
					
			if ($property instanceof Property\ObjectProperty) {

				$jtable = $this->_mapper ? $this->_mapper->getDatastore($property->getParameter('instanceof')) : $property->getParameter('instanceof');
				$leftkey  = $this->_mapper ? $this->_mapper->propertyToDatastoreName($class, $property->getId()) : $property->getId();
				$field = $rightkey  = $this->_mapper ? $this->_mapper->getPrimaryKey($property->getParameter('instanceof')) : 'id';

				$join = sprintf("%s.%s = %s.%s", $table, $leftkey, $jtable, $rightkey);
				$select->joinLeft($jtable, $join, array());
				
			} else {
				
				$field = $property->getId();
				
				if ($this->_mapper) {

					$field = $this->_mapper->propertyToDatastoreName($class, $field);
				}
			}

			/* if a join was performed, prefix current field with table name */
			if ($jtable) {
					
				$field = $jtable . '.' . $field;
			}
				
			$statement = $this->_buildConditionStatement($field, $condition->getClauses());

			switch ($conditionArray[1]) {
				
				case 'OR':
					$select->orWhere($statement);
					break;
					
				case 'AND':
				default:
					$select->where($statement);
					break;
			}
		}
		
		if ($returnCount != true) {
			
			foreach ($collection->getSortings() as $sorting) {
			
				if ($this->_mapper) {
			
					$class = $sorting[0]->getParent() ? $sorting[0]->getParent()->getId() : $collection->getDataObject()->getClass();
					$field = $this->_mapper->propertyToDatastoreName($class, $sorting[0]->getId());
			
				} else {

					$field = $sorting[0]->getId();
				}
			
				$select->order($field, $sorting[1]);
			}
		
			$select->limit($collection->getBoundaryBatch(), $collection->getBoundaryOffset());
			
		}
		
//		echo $select; die;

		$result = array();
		$context = array('table' => $table);
		
		try {
			$result = $this->_ressource->fetchAll($select);
		} catch (\Zend_Db_Exception $e) {
			
			$context['error'] = $e->getMessage();
		}
		
		$this->_setLastQuery($select->__toString(), $select->getPart('where'), $context);
		
		if ($returnCount == true) {
			
			return $result[0][\t41\Backend::MAX_ROWS_IDENTIFIER];
		}
		
		
		// convert array of primary keys to strings
		foreach ($result as $key => $val) {
			
			$result[$key] = implode(\t41\Mapper::VALUES_SEPARATOR, $val);
		}
		
		/* prepare base of object uri */
		$uri = new ObjectModel\ObjectUri();
		$uri->setBackendUri($this->_uri);
		$uri->setClass($collection->getDataObject()->getClass());
		$uri->setUrl($this->_database . '/' . $table . '/');
		
		return $this->_populateCollection($result, $collection, $uri);
	}
	
	
	/**
	 * Returns a condition statement string based on given field identifier and clause(s)
	 * 
	 * @param string	$field
	 * @param array		$clauses
	 * @param string 	$mode
	 * @return string
	 */
	protected function _buildConditionStatement($field, array $clauses, $mode = 'AND')
	{
		$statements = array();
		
		foreach ($clauses as $key => $clause) {
			
			$ops = $this->_matchOperator($clause['operator']);
			$_operators = $this->_operators;
			$fuzzy = false;
		
			$value = $clause['value'];
			
			/* if value is an t41_Object_Model-derivated object, use its uri to get id value
			 * 
			 * @todo set a better way to check that a t41_Object_Uri contains a given t41_Backend_Uri/alias
			 *
			 * @var $value t41_Object_Model
			 */
			if ($value instanceof ObjectModel\ObjectModel || $value instanceof ObjectModel\DataObject) {

				if ($value->getUri()->getBackendUri()->getAlias() == $this->_uri->getAlias()) {
					
					$value = $value->getUri()->getIdentifier();
				
				} else {
					
					$value = $value->getUri();
				}
				
			} else if ($value instanceof ObjectModel\ObjectUri) {
								
				if ($value->getBackendUri()->getAlias() == $this->_uri->getAlias()) {
				
					$value = $value->getIdentifier();
				}
				/* in any other case, use uri's string representation as key */
			}
			
			if (is_array($value)) {
		
				$_operators[Backend\Condition::OPERATOR_EQUAL]	= 'IN';
				$_operators[Backend\Condition::OPERATOR_DIFF]	= 'NOT IN';
			
			} else {

				if (in_array(Backend\Condition::OPERATOR_BEGINSWITH, $ops)) {
			
					$value .= '%';
					$fuzzy = true;
				}
		
				if (in_array(Backend\Condition::OPERATOR_ENDSWITH, $ops)) {
			
					$value = '%' . $value;
					$fuzzy = true;
				}
			}
			
			if ($fuzzy) {
				
				$_operators[Backend\Condition::OPERATOR_EQUAL]	= 'LIKE';
				$_operators[Backend\Condition::OPERATOR_DIFF]	= 'NOT LIKE';
			}
		
			$operator = '';
		
			foreach ($ops as $op) {
			
				if (isset($_operators[$op])) {
				
					$operator .= $_operators[$op];
				}
			}
		
			$needle = is_array($value) ? '(?)' : '?';
			$statements[] = $this->_ressource->quoteInto(sprintf("%s %s $needle", $field, $operator), $value);
		}
		
		return implode(" $mode ", $statements);
	}
}
